# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from eth_jit_exitter import signer_pb2 as signer__pb2


class SignerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Sign = channel.unary_unary(
                '/v1.Signer/Sign',
                request_serializer=signer__pb2.SignRequest.SerializeToString,
                response_deserializer=signer__pb2.SignResponse.FromString,
                )
        self.Multisign = channel.unary_unary(
                '/v1.Signer/Multisign',
                request_serializer=signer__pb2.MultisignRequest.SerializeToString,
                response_deserializer=signer__pb2.MultisignResponse.FromString,
                )
        self.SignBeaconAttestation = channel.unary_unary(
                '/v1.Signer/SignBeaconAttestation',
                request_serializer=signer__pb2.SignBeaconAttestationRequest.SerializeToString,
                response_deserializer=signer__pb2.SignResponse.FromString,
                )
        self.SignBeaconAttestations = channel.unary_unary(
                '/v1.Signer/SignBeaconAttestations',
                request_serializer=signer__pb2.SignBeaconAttestationsRequest.SerializeToString,
                response_deserializer=signer__pb2.MultisignResponse.FromString,
                )
        self.SignBeaconProposal = channel.unary_unary(
                '/v1.Signer/SignBeaconProposal',
                request_serializer=signer__pb2.SignBeaconProposalRequest.SerializeToString,
                response_deserializer=signer__pb2.SignResponse.FromString,
                )


class SignerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Sign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Multisign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignBeaconAttestation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignBeaconAttestations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignBeaconProposal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SignerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Sign': grpc.unary_unary_rpc_method_handler(
                    servicer.Sign,
                    request_deserializer=signer__pb2.SignRequest.FromString,
                    response_serializer=signer__pb2.SignResponse.SerializeToString,
            ),
            'Multisign': grpc.unary_unary_rpc_method_handler(
                    servicer.Multisign,
                    request_deserializer=signer__pb2.MultisignRequest.FromString,
                    response_serializer=signer__pb2.MultisignResponse.SerializeToString,
            ),
            'SignBeaconAttestation': grpc.unary_unary_rpc_method_handler(
                    servicer.SignBeaconAttestation,
                    request_deserializer=signer__pb2.SignBeaconAttestationRequest.FromString,
                    response_serializer=signer__pb2.SignResponse.SerializeToString,
            ),
            'SignBeaconAttestations': grpc.unary_unary_rpc_method_handler(
                    servicer.SignBeaconAttestations,
                    request_deserializer=signer__pb2.SignBeaconAttestationsRequest.FromString,
                    response_serializer=signer__pb2.MultisignResponse.SerializeToString,
            ),
            'SignBeaconProposal': grpc.unary_unary_rpc_method_handler(
                    servicer.SignBeaconProposal,
                    request_deserializer=signer__pb2.SignBeaconProposalRequest.FromString,
                    response_serializer=signer__pb2.SignResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.Signer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Signer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Sign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Signer/Sign',
            signer__pb2.SignRequest.SerializeToString,
            signer__pb2.SignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Multisign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Signer/Multisign',
            signer__pb2.MultisignRequest.SerializeToString,
            signer__pb2.MultisignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignBeaconAttestation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Signer/SignBeaconAttestation',
            signer__pb2.SignBeaconAttestationRequest.SerializeToString,
            signer__pb2.SignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignBeaconAttestations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Signer/SignBeaconAttestations',
            signer__pb2.SignBeaconAttestationsRequest.SerializeToString,
            signer__pb2.MultisignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignBeaconProposal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Signer/SignBeaconProposal',
            signer__pb2.SignBeaconProposalRequest.SerializeToString,
            signer__pb2.SignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
